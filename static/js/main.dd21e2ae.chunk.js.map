{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YACjF,mCAAOL,EAAMG,QAAQG,KAArB,OACA,4BAAKN,EAAMG,QAAQI,YCHbC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJlBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAeA,EACfG,SAAWF,MCqCAG,G,wDAtCb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXd,SAAS,GACTW,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAO3C,WACE,MAAkCC,KAAKN,MAA/Bd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK/B,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,CACEW,YAAa,kBACbC,aAAegB,KAAKZ,iBAEtB,cAAC,EAAD,CAAUR,SAAWqB,W,GAjCXI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dd21e2ae.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n       <h1> { props.monster.name } </h1> \n       <p>{ props.monster.email }</p>\n    </div>\n)\n","import React from 'react';\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />\n        ))}\n    </div>\n);\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n    className='search'\n    type=\"search\" \n    placeholder= { placeholder } \n    onChange={ handleChange }\n    />\n);","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super(); // access to this.state\n\n    this.state = { // state is some object with property that can access at anytime\n      monsters:[],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }));\n  }\n  \n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Monsters Rolodex</h1>\n        <SearchBox \n          placeholder= 'search monsters'\n          handleChange={ this.onSearchChange }\n        />\n        <CardList monsters={ filteredMonsters } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}